name: next-app-deploy

on: [push]

jobs:
  publish-image:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    env:
      DOCKER_FILE_PATH: ./ts/app/Dockerfile
      CONTEXT_PATH: ./ts
      AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
      IMAGE_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com/app
      OIDC_ROLE_ARN: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ secrets.OIDC_ROLE_NAME }}
      DOCKER_BUILDKIT: 1 # 不要？
    services:
      docker:
        image: public.ecr.aws/docker/library/docker:26.1.4-dind
        options: --privileged
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: linux/arm64 # buildx で arm64 用のイメージをビルドするために必要？
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      # 以下 3 step は共通化したい
      - name: Configure AWS credentials from OIDC
        id: aws-creds
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_DEFAULT_REGION }}
          role-to-assume: ${{ env.OIDC_ROLE_ARN }}
      - name: Export temporary credentials # これは不要？
        run: |
          export AWS_ACCESS_KEY_ID=$(aws configure get aws_access_key_id)
          export AWS_SECRET_ACCESS_KEY=$(aws configure get aws_secret_access_key)
          export AWS_SESSION_TOKEN=$(aws configure get aws_session_token)
      - name: Verify AWS credentials # これは不要？
        run: |
          aws sts get-caller-identity
      - uses: aws-actions/amazon-ecr-login@v2
        id: login-ecr # outputs で参照するために id を設定
      - name: Tag Docker image
        id: tag-image
        run: |
          if [ -z "$IMAGE_TAG" ]; then 
            IMAGE_TAG=${{ github.sha }}; 
          fi 
          echo "image_tag=${IMAGE_TAG}" >> $GITHUB_OUTPUT
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
      - name: Build and push API
        uses: docker/build-push-action@v5
        with:
          push: true
          platforms: linux/arm64
          provenance: false
          tags: ${{ env.IMAGE_REGISTRY }}:${{ env.IMAGE_TAG }}
          context: ${{ env.CONTEXT_PATH }}
          file: ${{ env.DOCKER_FILE_PATH }}
    outputs:
      imageTag: ${{ steps.tag-image.outputs.image_tag }}

  deploy-app:
    runs-on: ubuntu-latest
    needs: publish-image
    permissions:
      id-token: write
      contents: read
    env:
      TASK_CPU_SIZE: 512
      TASK_MEM_SIZE: 1024
      ECSPRESSO_DEPLOY_TASKS: 1
      AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
      IMAGE_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com/app
      OIDC_ROLE_ARN: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ secrets.OIDC_ROLE_NAME }}
      # ここを変える
      ECS_CLUSTER_NAME: ${{ secrets.ECS_CLUSTER_NAME }}
      IMAGE_TAG: ${{ needs.publish-image.outputs.imageTag }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Install ecspresso
        uses: kayac/ecspresso@v2
        with:
          version: v2.3.3
      # 以下 3 step は共通化したい
      - name: Configure AWS credentials from OIDC
        id: aws-creds
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_DEFAULT_REGION }}
          role-to-assume: ${{ env.OIDC_ROLE_ARN }}
      - name: Export temporary credentials # これは不要？
        run: |
          export AWS_ACCESS_KEY_ID=$(aws configure get aws_access_key_id)
          export AWS_SECRET_ACCESS_KEY=$(aws configure get aws_secret_access_key)
          export AWS_SESSION_TOKEN=$(aws configure get aws_session_token)
      - name: Verify AWS credentials # これは不要？
        run: |
          aws sts get-caller-identity
      - name: Deploy to ECS
        # ここを変える
        run: |
          cd ./ts/app/ecs
          set -o pipefail
          ecspresso deploy --tasks=${ECSPRESSO_DEPLOY_TASKS} 2>&1 | tee /tmp/ecsdeploy
          ( ! grep -q "ECS deployment circuit breaker" /tmp/ecsdeploy )
